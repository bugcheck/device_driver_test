
Testsuite execution
-------------------
1. Go to 'scripts' subdirectory inside the testsuite directory.
2. Open conf.sh and modifiy the following ambient variables:
        export REMOTE_USER=<linuxPCUser>
        export REMOTE_IP=<linuxPCIP>
3. Copy your modules in the ${USBDEVICE_ROOT}/../modules path.
4. Execute the main script:
        test_runner.sh -p 'scenario_id'
   * The scenarios IDs can be found under script/scenarios/
5. Results will be reported showing Scenario-TestCase IDs and the result of each test.
   * 0 - Successful
   * Any other value different of 0 - Failure

Requirements
------------
The file system on which the testsuite is going to be executed needs to have the following utilities:
* sh
* bc
* bash
* diff
* cmp


Notes
-----


Creating a 50 Mb file: 
---------------------

For the scenario  L_DD_USB_Device_0005_0001 | Functional Test: Gadget File Storage: Linux PC Host
we are creating a 20Mb file to use as the mass storage under the handlerUsbDeviceSetup.sh script, 
if we are interested in create a bigger than file we can change the value on this line:

dd if=/dev/urandom of=/mnt/ramdrive/usb.ext2.temporal.file bs=1M count=50

We need increase o decrease the value in the count variable, on this case we are creating a 50Mb file.


Creating the id_rsa for set up passphrase authentication:
---------------------------------------------------------
   On the OMAP:

1. Make sure you have SSH installed on your filesystem.
2. Make sure you have a directory named /root/.ssh on your filesystem.
3. Run the command ssh-keygen -t rsa*. By default, this will create files in
   /root/.ssh named id_rsa and id_rsa.pub.
   The file id_rsa contains your private key.
   The file id_rsa.pub is the corresponding public key.
   You will be prompted to enter a "passphrase" that is a text string,
   that you will use for passphrase authentication.
4. Copy the id_rsa on the SSH_PATH

    On the remote machine that you want to access:

1. Make a directory $HOME/.ssh on the remote machine.
2. Copy the contents of the file on your filesystem named /root/.ssh/id_rsa.pub
   into a file on the remote machine named $HOME/.ssh/authorized_keys.
   Make sure that you have not introduced any spurious line breaks into the file
   when you copy it.
   This single file can hold multiple public keys on separate lines.
3. Log out of the remote machine. Now when you connect to the remote machine
   from the OMAP, SSH will prompt you for the passphrase.

*In case of getting this error: -/bin/sh: ssh-keygen: not found. Go to /ssh and run
./ssh-keygen -t rsa.


Using testusb on the remote desktop:
------------------------------------

1. You will need to download test.sh and testusb.c from the following web page
   http://www.linux-usb.org/usbtest/
2. Put this files on /data/utilities/usb folder of your Linux PC.
3. To do testusb on the remote PC from the OMAP terminal, you will use the
   id_rsa utility. For this you have to modify the test.sh file changing the
   directory where testusb is located on the remote PC (/data/utilities/usb).
   You can apply the patch that is located in the utils folder called
   testusb-onRemotePC.patch for this.


STEPS FOR TEST ETHERNET USING A LINUX PC
--------------------------------------

Functional test for ethernet gadget using Linux PC host (CDC-ethernet).
1) Load the ethernet gadget driver (compiled with RNDIS support, because CDC-ethernet works regardless of whether RNDIS is enabled or not) on the OMAP board:
   insmod g_ether.ko
2) Connect the OMAP board to the Linux PC host using a std-A to mini-B USB cable. Check enumeration by running:
   cat /proc/bus/usb/devices
3) Check that a new network interface (usb0) is created on the host PC by running: 
  cat /proc/net/dev
An entry for usb0 must be present.
4) Now configure the host and device network interfaces using 'ifconfig' and add a route. We are assigning the address <IP_HOST> to the host and <IP_DEV> to the device. The netmask should be such that the host and device are able to see each other. For example, if IP_HOST=128.247.76.46 and IP_DEV=128.247.77.13, then netmask must be 255.255.254.0.
On the host:
   # ifconfig usb0 <IP_HOST> netmask <NETMASK>
   # route add <IP_DEV> dev usb0 
On the device: 
   # ifconfig usb0 <IP_DEV> netmask <NETMASK>
   # route add <IP_HOST> dev usb0
5) Unplug the ethernet connection of the host PC from the network.
6) On the host, run:
   # ping <IP_DEV>
7) On the device, run:
   # ping <IP_HOST>

Execute this test case using high speed as well as full speed hosts.
